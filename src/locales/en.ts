export default {
  app: {
    title: 'World Pay-Sifang'
  },
  common: {
    inputText: 'Please input',
    ipInput: 'IP',
    userInput: 'User ID or Name',
    illustrateInput: 'Illustrate',
    requestPathInput: 'Request path',
    selectText: 'Please select',
    startTimeText: 'Start time',
    endTimeText: 'End time',
    login: 'Login',
    required: 'This is required',
    loginOut: 'Login out',
    document: 'Document',
    reminder: 'Reminder',
    loginOutMessage: 'Exit the system?',
    back: 'Back',
    ok: 'OK',
    cancel: 'Cancel',
    reload: 'Reload current',
    closeTab: 'Close current',
    closeTheLeftTab: 'Close left',
    closeTheRightTab: 'Close right',
    closeOther: 'Close other',
    closeAll: 'Close all',
    prevLabel: 'Prev',
    nextLabel: 'Next',
    skipLabel: 'Jump',
    doneLabel: 'End',
    menu: 'Menu',
    menuDes: 'Menu bar rendered in routed structure',
    collapse: 'Collapse',
    collapseDes: 'Expand and zoom the menu bar',
    tagsView: 'Tags view',
    tagsViewDes: 'Used to record routing history',
    tool: 'Tool',
    toolDes: 'Used to set up custom systems',
    query: 'Query',
    reset: 'Reset',
    addAccount: 'Add Account',
    shrink: 'Put away',
    expand: 'Expand',
    delMessage: 'Delete the selected data?',
    delWarning: 'Warning',
    delOk: 'OK',
    delCancel: 'Cancel',
    delNoData: 'Please select the data to delete',
    delSuccess: 'Deleted successfully',
    refresh: 'Refresh',
    fullscreen: 'Fullscreen',
    size: 'Size',
    columnSetting: 'Column setting',
    lengthRange: 'The length should be between {min} and {max}',
    notSpace: 'Spaces are not allowed',
    notSpecialCharacters: 'Special characters are not allowed',
    isEqual: 'The two are not equal',
    // 列设置
    setting: 'Setting',
    search: 'Search',
    addChannel: 'Add Channel',
    channelStatus: 'Channel Status',
    statistics: 'Statistics',
    userRole: 'User role',
    selectUserRole: 'Select User Role',
    enabled: 'Enabled',
    closed: 'Closed'
  },
  lock: {
    lockScreen: 'Lock screen',
    lock: 'Lock',
    lockPassword: 'Lock screen password',
    unlock: 'Click to unlock',
    backToLogin: 'Back to login',
    entrySystem: 'Entry the system',
    placeholder: 'Please enter the lock screen password',
    message: 'Lock screen password error'
  },
  error: {
    noPermission: `Sorry, you don't have permission to access this page.`,
    pageError: 'Sorry, the page you visited does not exist.',
    networkError: 'Sorry, the server reported an error.',
    returnToHome: 'Return to home'
  },
  setting: {
    projectSetting: 'Project setting',
    theme: 'Theme',
    layout: 'Layout',
    systemTheme: 'System theme',
    menuTheme: 'Menu theme',
    interfaceDisplay: 'Interface display',
    breadcrumb: 'Breadcrumb',
    breadcrumbIcon: 'Breadcrumb icon',
    collapseMenu: 'Collapse menu',
    hamburgerIcon: 'Hamburger icon',
    screenfullIcon: 'Screenfull icon',
    sizeIcon: 'Size icon',
    localeIcon: 'Locale icon',
    tagsView: 'Tags view',
    logo: 'Logo',
    greyMode: 'Grey mode',
    fixedHeader: 'Fixed header',
    headerTheme: 'Header theme',
    cutMenu: 'Cut Menu',
    copy: 'Copy',
    clearAndReset: 'Clear cache and reset',
    copySuccess: 'Copy success',
    copyFailed: 'Copy failed',
    footer: 'Footer',
    uniqueOpened: 'Unique opened',
    tagsViewIcon: 'Tags view icon',
    // 开启动态路由
    dynamicRouter: 'Enable dynamic router',
    serverDynamicRouter: 'Server dynamic router',
    reExperienced: 'Please exit the login experience again',
    fixedMenu: 'Fixed menu'
  },
  size: {
    default: 'Default',
    large: 'Large',
    small: 'Small'
  },
  login: {
    welcome: 'Welcome to the system',
    message: 'Backstage management system',
    username: 'Username',
    password: 'Password',
    register: 'Register',
    checkPassword: 'Confirm password',
    login: 'Sign in',
    otherLogin: 'Sign in with',
    remember: 'Remember me',
    hasUser: 'Existing account? Go to login',
    forgetPassword: 'Forget password',
    usernamePlaceholder: 'Please input username',
    passwordPlaceholder: 'Please input password',
    code: 'Verification code',
    codePlaceholder: 'Please input verification code',
    getCode: 'Get code'
  },
  router: {
    login: 'Login',
    level: 'Multi level menu',
    menu: 'Menu',
    menu1: 'Menu1',
    menu11: 'Menu1-1',
    menu111: 'Menu1-1-1',
    menu12: 'Menu1-2',
    menu2: 'Menu2',
    dashboard: 'Dashboard',
    analysis: 'Analysis',
    workplace: 'Workplace',
    guide: 'Guide',
    component: 'Component',
    icon: 'Icon',
    echart: 'Echart',
    countTo: 'Count to',
    watermark: 'Watermark',
    qrcode: 'Qrcode',
    highlight: 'Highlight',
    infotip: 'Infotip',
    form: 'Form',
    defaultForm: 'All examples',
    search: 'Search',
    table: 'Table',
    defaultTable: 'Basic example',
    editor: 'Editor',
    richText: 'Rich text',
    jsonEditor: 'JSON Editor',
    codeEditor: 'Code Editor',
    dialog: 'Dialog',
    imageViewer: 'Image viewer',
    descriptions: 'Descriptions',
    example: 'Example',
    exampleDialog: 'Example dialog',
    examplePage: 'Example page',
    exampleAdd: 'Example page - add',
    exampleEdit: 'Example page - edit',
    exampleDetail: 'Example page - detail',
    errorPage: 'Error page',
    authorization: 'Authorization',
    user: 'User management',
    role: 'Role management',
    document: 'Document',
    inputPassword: 'InputPassword',
    sticky: 'Sticky',
    treeTable: 'Tree table',
    PicturePreview: 'Table Image Preview',
    department: 'Department management',
    menuManagement: 'Menu management',
    // 权限测试页面
    permission: 'Permission test page',
    function: 'Function',
    multipleTabs: 'Multiple tabs',
    details: 'Details',
    iconPicker: 'Icon picker',
    request: 'Request',
    waterfall: 'Waterfall',
    imageCropping: 'Image cropping',
    videoPlayer: 'Video player',
    // 表格视频预览
    tableVideoPreview: 'Table video preview',
    cardTable: 'Card table',
    personalCenter: 'Personal center',
    personal: 'Personal',
    avatars: 'Avatars',
    iAgree: 'I agree',
    tree: 'Tree',
    // 主页
    home: 'Home',

    accountinformation: 'Account Information',
    bankcardinformation: 'Bank Card Information',
    collectionorder: 'Collection Order',
    cashflow: 'Cash Flow',
    settlementrecords: 'Settelment Record',
    downloadfile: 'Download file',
    // 通道管理
    channelmanagement: 'Channel Management',
    paymentchannelmanagement: 'Payment Channel Management',
    collectionchannel: 'Collection Channel',
    paymentchannel: 'Payment Channel',
    // 商户管理
    merchantmanagement: ' Merchant Management',
    merchantlist: 'Merchant List',
    merchantclassification: 'Merchant Classification',
    internallist: 'Internal List',
    deductionlist: 'Deduction List',
    withdrawapplication: 'Withdrawal Application',
    // 代收管理
    collectionmanagement: 'Collection Management',
    orderlist: 'Order List',
    droporderlist: 'Drop Order List',
    callbackrecord: 'Callback Record',
    // 代付管理
    paymentmanagement: 'Payment Management',
    paymentconfiguration: 'Payment Configuration',
    paymentorder: 'Payment Order',
    // 财务管理
    financialmanagement: 'Financial Management',
    merchantreport: 'Merchant Report',
    channelreport: 'Channel Report',
    // 安全管理
    securitymonitoring: 'Security Monitoring',
    abnormalordermonitoring: 'Abnormal Order Mornitoring',
    paymentorderdetection: 'Payment Order Detection',
    // 系统管理
    systemmanagement: 'System Management',
    userlist: 'User List',
    operationlog: 'Operation Log',
    systemconfiguration: 'System Configuration',
    // API日志
    APIlogs: 'API Logs',
    systemAPIlog: 'System API Log',
    channelAPIlog: 'Channel API Log',
    // 接入指南
    accessguide: 'Access Guide',
    collectionAPI: 'Collection API',
    paymentAPI: 'Payment API',
    configuration: 'System Configuration',
    listofroles: 'List of roles',
    listofmenus: 'List of menus',
    callbacklog: 'Callback Record'
  },
  permission: {
    hasPermission: 'Please set the operation permission value'
  },
  analysis: {
    newUser: 'New user',
    unreadInformation: 'Unread information',
    transactionAmount: 'Transaction amount',
    totalShopping: 'Total Shopping',
    monthlySales: 'Monthly sales',
    userAccessSource: 'User access source',
    january: 'January',
    february: 'February',
    march: 'March',
    april: 'April',
    may: 'May',
    june: 'June',
    july: 'July',
    august: 'August',
    september: 'September',
    october: 'October',
    november: 'November',
    december: 'December',
    estimate: 'Estimate',
    actual: 'Actual',
    directAccess: 'Airect access',
    mailMarketing: 'Mail marketing',
    allianceAdvertising: 'Alliance advertising',
    videoAdvertising: 'Video advertising',
    searchEngines: 'Search engines',
    weeklyUserActivity: 'Weekly user activity',
    activeQuantity: 'Active quantity',
    monday: 'Monday',
    tuesday: 'Tuesday',
    wednesday: 'Wednesday',
    thursday: 'Thursday',
    friday: 'Friday',
    saturday: 'Saturday',
    sunday: 'Sunday'
  },
  workplace: {
    goodMorning: 'Good morning',
    happyDay: 'Wish you happy every day!',
    toady: `It's sunny today`,
    project: 'Project',
    access: 'Project access',
    toDo: 'To do',
    introduction: 'A serious introduction',
    more: 'More',
    shortcutOperation: 'Shortcut operation',
    operation: 'Operation',
    index: 'Index',
    personal: 'Personal',
    team: 'Team',
    quote: 'Quote',
    contribution: 'Contribution',
    hot: 'Hot',
    yield: 'Yield',
    dynamic: 'Dynamic',
    push: 'push',
    pushCode: 'Archer push code to Github',
    follow: 'Follow'
  },
  formDemo: {
    input: 'Input',
    inputNumber: 'InputNumber',
    default: 'Default',
    icon: 'Icon',
    mixed: 'Mixed',
    password: 'Password',
    textarea: 'Textarea',
    remoteSearch: 'Remote search',
    slot: 'Slot',
    position: 'Position',
    autocomplete: 'Autocomplete',
    select: 'Select',
    optionSlot: 'Option Slot',
    selectGroup: 'Select Group',
    selectV2: 'SelectV2',
    cascader: 'Cascader',
    switch: 'Switch',
    rate: 'Rate',
    colorPicker: 'Color Picker',
    transfer: 'Transfer',
    render: 'Render',
    radio: 'Radio',
    radioGroup: 'Radio Group',
    button: 'Button',
    checkbox: 'Checkbox',
    checkboxButton: 'Checkbox Button',
    datePlaceholder: 'Time',
    checkboxGroup: 'Checkbox Group',
    slider: 'Slider',
    datePicker: 'Date Picker',
    shortcuts: 'Shortcuts',
    today: 'Today',
    yesterday: 'Yesterday',
    aWeekAgo: 'A week ago',
    week: 'Week',
    year: 'Year',
    month: 'Month',
    dates: 'Dates',
    daterange: 'Date Range',
    monthrange: 'Month Range',
    dateTimePicker: 'DateTimePicker',
    dateTimerange: 'Datetime Range',
    timePicker: 'Time Picker',
    timeSelect: 'Time Select',
    inputPassword: 'input Password',
    passwordStrength: 'Password Strength',
    defaultForm: 'All examples',
    formDes:
      'The secondary encapsulation of form components based on ElementPlus realizes data-driven and supports all Form parameters',
    example: 'example',
    operate: 'operate',
    change: 'Change',
    restore: 'Restore',
    disabled: 'Disabled',
    disablement: 'Disablement',
    delete: 'Delete',
    add: 'Add',
    setValue: 'Set value',
    resetValue: 'Reset value',
    set: 'Set',
    subitem: 'Subitem',
    formValidation: 'Form validation',
    verifyReset: 'Verify reset',
    // 富文本编辑器
    richText: 'Rich text',
    jsonEditor: 'JSON Editor',
    form: 'Form',
    // 远程加载
    remoteLoading: 'Remote loading',
    // 聚焦
    focus: 'Focus',
    treeSelect: 'Tree Select',
    showCheckbox: 'Show Checkbox',
    selectAnyLevel: 'Select Any Level',
    multiple: 'Multiple',
    filterable: 'Filterable',
    // 自定义节点内容
    customContent: 'Custom content',
    // 懒加载
    lazyLoad: 'Lazy load',
    upload: 'Upload',
    // 用户头像
    userAvatar: 'User avatar',
    iconPicker: 'Icon picker',
    iAgree: 'I agree',
    name: 'Name',
    mail: 'Mail',
    account: 'Account',
    remark: 'Remark',
    state: 'State',
    normal: 'Normal',
    disable: 'Disable',
    role: 'Role',
    //search componenet
    search: 'Search: ',
    processingstatus: 'Processing Status',
    awaitingreview: 'Awaiting Review',
    reject: 'Reject',
    success: 'Success',
    merchantnameormerchantid: 'Merchant Name or Merchant ID',
    receivingbandcardnumber: 'Receiving band card number',
    amount: 'Amount',
    date: 'Date',
    merchantname: 'Merchant Name',
    proxyaccount: 'Proxy account',
    merchantid: 'Merchant ID',
    receivingbank: 'Receiving bank',
    paymentcardnumber: 'Payment card number',
    payeename: 'Payee Name',
    withdrawalamount: 'Withdrawal Amount',
    fees: 'Fees',
    actualdeductionamount: 'Actual deduction amount',
    handler: 'Handler',
    processingtime: 'Processing time',
    applicationperiod: 'Application period',
    deductionamount: 'Deduction amount',
    time: 'Time',
    operator: 'Operator',
    // Merchant Report
    collectionamount: 'Collection amount',
    collectionfee: 'Collection fee',
    paymentamount: 'Payment amount',
    paymentofhandlingfee: 'Payment of handling fee',
    manualdelivery: 'Manual delivery',
    manuallyissuehandlingfees: 'Manually issue handling fees',
    internalfeeamount: 'Internal fee amount',
    internalcharges: 'Internal charges',
    startingmerchantbalance: 'Starting merchant balance',
    endingmerchantbalance: 'Ending merchant balanve',
    errorvalue: 'Error value',
    // Channel Report
    issue: 'Issue',
    issuingfee: 'Issuing fee'
  },
  guideDemo: {
    guide: 'Guide',
    start: 'Start',
    message:
      'The guide page is very useful for some people who enter the project for the first time. You can briefly introduce the functions of the project. The boot page is based on driver.js'
  },
  iconDemo: {
    icon: 'Icon',
    localIcon: 'Local Icon',
    iconify: 'Iconify component',
    recommendedUse: 'Recommended use',
    recommendeDes:
      'Iconify component basically contains all icons. You can query any icon you want. And packaging will only package the icons used.',
    accessAddress: 'Access address'
  },
  saveDemo: {
    recommendeDes: 'After saving some settings, you need to refresh the page to take effect!'
  },
  echartDemo: {
    echart: 'Echart',
    echartDes:
      'Based on the secondary packaging components of eckarts, the width is adaptive. The corresponding chart can be displayed by passing in the options and height attributes.'
  },
  countToDemo: {
    countTo: 'CountTo',
    countToDes:
      'The transformation is based on vue-count-to and supports all vue-count-to parameters.',
    suffix: 'Suffix',
    prefix: 'Prefix',
    separator: 'Separator',
    duration: 'Duration',
    endVal: 'End val',
    startVal: 'Start val',
    start: 'Start',
    pause: 'Pause',
    resume: 'Resume'
  },
  watermarkDemo: {
    watermark: 'Watermark',
    createdWatermark: 'Created watermark',
    clearWatermark: 'Clear watermark',
    resetWatermark: 'Reset watermark'
  },
  qrcodeDemo: {
    qrcode: 'Qrcode',
    qrcodeDes: 'Secondary packaging based on qrcode',
    basicUsage: 'Basic usage',
    imgTag: 'Img tag',
    style: 'Style config',
    click: 'Click event',
    asynchronousContent: 'Asynchronous content',
    invalid: 'Invalid',
    logoConfig: 'Logo config',
    logoStyle: 'Logo style',
    size: 'size config'
  },
  treeDemo: {
    treeTitle: 'Tree control (right-click node to customize menu options)',
    message:
      'The tree component is based on the secondary packaging of the tree component of ElementPlus'
  },
  highlightDemo: {
    highlight: 'Highlight',
    message: 'The best time to plant a tree is ten years ago, followed by now.',
    keys1: 'ten years ago',
    keys2: 'now'
  },
  infotipDemo: {
    infotip: 'Infotip',
    infotipDes: 'Secondary packaging of components based on Highlight',
    title: 'matters needing attention'
  },
  levelDemo: {
    menu: 'Multi level menu cache'
  },
  searchDemo: {
    search: 'Search',
    searchDes:
      'Based on the secondary encapsulation of form components, the functions of query and reset are realized',
    operate: 'operate',
    change: 'Change',
    grid: 'grid',
    button: 'Button',
    restore: 'Restore',
    inline: 'inline',
    bottom: 'Bottom',
    position: 'position',
    left: 'left',
    center: 'center',
    right: 'right',
    dynamicOptions: 'Dynamic options',
    // 删除单选框
    deleteRadio: 'Delete radio',
    // 还原单选框
    restoreRadio: 'Restore radio',
    loading: 'Loading',
    reset: 'Reset',
    open: 'Open',
    disable: 'Disable',
    channelStatus: 'Channel Status',
    upstreamMerchantId: 'Upstream Merchant ID',
    upstreamMerchantAccount: 'Upstream Merchant Account',
    remark: 'Remark',
    mer_account: 'mer_account'
  },
  stickyDemo: {
    sticky: 'Sticky'
  },
  tableDemo: {
    table: 'Table',
    tableDes: 'Secondary packaging of Table components based on ElementPlus',
    index: 'Index',
    title: 'Title',
    author: 'Author',
    displayTime: 'Display time',
    importance: 'Importance',
    pageviews: 'Pageviews',
    action: 'Action',
    important: 'Important',
    good: 'Good',
    commonly: 'Commonly',
    operate: 'operate',
    example: 'example',
    show: 'Show',
    hidden: 'Hidden',
    pagination: 'pagination',
    reserveIndex: 'Reserve index',
    restoreIndex: 'Restore index',
    showSelections: 'Show selections',
    hiddenSelections: 'Restore selections',
    showExpandedRows: 'Show expanded rows',
    hiddenExpandedRows: 'Hidden expanded rows',
    changeTitle: 'Change title',
    header: 'Header',
    selectAllNone: 'Select all / none',
    delOrAddAction: 'Delete or add action',
    showOrHiddenStripe: 'Show or hidden stripe',
    showOrHiddenBorder: 'Show or hidden border',
    fixedHeaderOrAuto: 'Fixed header or auto',
    getSelections: 'Get selections',
    preview: 'Preview',
    showOrHiddenSortable: 'Show or hidden sortable',
    videoPreview: 'Video preview',
    cardTable: 'Card table',
    operator: 'Operator',
    date: 'Date',
    statusCode: 'Status Code',
    requestIP: 'Request IP',
    requestMethod: 'Request Method',
    requestPath: 'Request Path',
    illustrate: 'Illustrate',
    rolename: 'Role Name',
    rolecode: 'Role Code',
    creationTime: 'Creation Time',
    remark: 'Remark',
    name: 'Name',
    account: 'Account',
    role: 'Role',
    mail: 'Mail',
    state: 'State',
    lastLoginTime: 'Last Login Time',
    channelName: 'Channel Name',
    channelCode: 'Channel Code',
    channelStatus: 'Channel Status',
    upstreammerchantID: 'Upstream merchant ID',
    upstreammerchantaccount: 'Upstream merchant account',
    upstreammerchantkey: 'Upstream merchant key',
    upstreammerchantpublickey: 'Upstream merchant public key',
    callbacklinks: 'Callbacklinks',
    balance: 'Balance',
    maximumamountofpayment: 'Maximum amount of payment',
    minimumamountofpayment: 'Minimum amount of payment',
    dailylimitedquantity: 'Dailyl imited quantity',
    creationtime: 'Creation time',
    mer_account: 'mer_account',
    callbackaddress: 'Callback address',
    paymentrate: 'Payment rate %',
    maximumpayment: 'Maximum payment',
    minimumpayment: 'Minimum payment'
  },
  richText: {
    richText: 'Rich text',
    richTextDes: 'Secondary packaging based on wangeditor',
    jsonEditor: 'JSON Editor',
    jsonEditorDes: 'Secondary packaging based on vue-json-pretty',
    codeEditor: 'Code Editor',
    codeEditorDes: 'Secondary packaging based on monaco-editor'
  },
  dialogDemo: {
    dialog: 'Dialog',
    resizeDialog: 'Resize dialog',
    dialogDes: 'Secondary packaging of Dialog components based on ElementPlus',
    open: 'Open',
    close: 'Close',
    combineWithForm: 'Combine with form',
    submit: 'Submit'
  },
  imageViewerDemo: {
    open: 'Open',
    imageViewer: 'Image viewer',
    imageViewerDes: 'Secondary packaging of ImageViewer components based on ElementPlus'
  },
  descriptionsDemo: {
    descriptions: 'Descriptions',
    descriptionsDes: 'Secondary packaging of Descriptions components based on ElementPlus',
    username: 'Username',
    nickName: 'NickName',
    phone: 'Phone',
    email: 'Email',
    addr: 'Address',
    form: 'Combined with Form component'
  },
  exampleDemo: {
    title: 'Title',
    add: 'Add',
    del: 'Delete',
    edit: 'Edit',
    author: 'Author',
    displayTime: 'Display time',
    importance: 'Importance',
    pageviews: 'Pageviews',
    important: 'Important',
    content: 'Content',
    save: 'Save',
    detail: 'Detail'
  },
  userDemo: {
    title: 'User management',
    message:
      'Because it is simulated data, only two accounts with different permissions are provided, which can be modified and combined by developers according to the actual situation.',
    index: 'Index',
    action: 'Action',
    username: 'Username',
    password: 'Password',
    role: 'Role',
    remark: 'Remark',
    remarkMessage1: 'Back end control routing permission',
    remarkMessage2: 'Front end control routing permission',
    // 部门列表
    departmentList: 'Department list',
    // 搜索部门
    searchDepartment: 'Search department',
    account: 'Account',
    email: 'Email',
    createTime: 'Create time',
    // 所属部门
    department: 'Department',
    departmentName: 'Department name',
    status: 'Status',
    enable: 'Enable',
    disable: 'Disable',
    superiorDepartment: 'Superior department'
  },
  menu: {
    menuName: 'Menu name',
    icon: 'Icon',
    // 权限
    permission: 'Permission',
    component: 'Component',
    path: 'Path',
    status: 'Status',
    hidden: 'Hidden',
    alwaysShow: 'Always show',
    noCache: 'No cache',
    breadcrumb: 'Breadcrumb',
    affix: 'Affix',
    noTagsView: 'No tags view',
    activeMenu: 'Active menu',
    canTo: 'Can to',
    name: 'Name'
  },
  role: {
    roleName: 'Role name',
    role: 'Role',
    // 菜单分配
    menu: 'Menu allocation'
  },
  inputPasswordDemo: {
    title: 'InputPassword',
    inputPasswordDes: 'Secondary packaging of Input components based on ElementPlus'
  },
  avatarsDemo: {
    title:
      'Avatar component for avatar list, secondary packaging based on element plus Avatar component'
  },
  configuration: {
    notice:
      "Website subdomain configuration, access the website's subdomain (configuration will overload the service, fill in carefully, just enter the domain name without the prefix http//: or https://)",
    loginSetting: 'Login Session validity period settings',
    loginPeriod: 'Merchant login session validity period/hours',
    operationsideLogin: 'Operation-side login session validity period/hours',
    validityPeriod: 'Validity period of agent login session/hours',
    loginIPWhitelist: 'Operation-side login IP whitelist',
    operationComment:
      'On the operation side, to log in to Google Verification, you need to use the Google Authenticator client, scan the QR code, and obtain the dynamic verification code',
    logingoogleSwitch: 'Login Google Authentication Switch',
    saveButton: 'Submit Save',
    subdomain: 'Website subdomain configuration, one per line',
    googleVerify:
      'On the operation side, to log in to Google Verification, you need to use the Google Authenticator client, scan the QR code, and obtain the dynamic verification code',
    googleSwitch: 'Login Google Authentication Switch'
  },
  channelInfotip: {
    recommendedUse:
      'The main switch of the platform’s payment channel controls all payment methods of the platform!'
  },
  merchantList: {
    merchantID: 'Merchant ID',
    merchantName: 'Merchant Name',
    merchantAccount: 'Merchant Account',
    availableBalance: 'Available Balance',
    secretKey: 'Secret Key',
    accountStatus: 'Account Status',
    loginAddress: 'Login Address',
    remark: 'Remark',
    registerTime: 'Registration Time',
    operate: 'Operate',
    addMerchant: 'Add Merchant',
    inactive: 'Inactive',
    active: 'Active',
    all: 'All',
    rechargeAmount: 'Recharge Amount',
    handlingFee: 'Handling Fees',
    statistics: 'Statistics',
    orderDataStatistics: 'Order data statistics',
    totalInternalAmount: 'Total internal recharge amount',
    totalInternalFee: 'Total internal recharge fee',
    freezeAccount: 'Freeze Account',
    cashFlow: 'Cash flow',
    clearLoginToken: 'Clear Login Token',
    viewGoogleCode: 'View Google Verification Code',
    updateGoogleCode: 'Update Google Verification Code',
    updateKey: 'Update Key',
    deductionAmount: 'deductionAmount',
    moreInformation: 'More Information',
    delete: 'delete',
    channelConfiguration: 'Channel Configuration',
    internalFilling: 'Internal filling'
  },
  merchantClassification: {
    categoryName: 'Category Name',
    addTime: 'Add Time',
    remark: 'Remark',
    operate: 'Operate',
    addCategory: 'Add Category'
  },
  paymentManagement: {
    ourOrderNumber: 'Our order number[0]',
    merchantName: 'Merchant name',
    platformOrderNumber: 'Platform order number',
    thirdpartyOrderNumber: 'Third-party order number',
    accountInformation: 'Account Information',
    paymentMode: 'Payment Mode',
    paymentChannels: 'Payment channels',
    orderAmount: 'Order amount',
    fees: 'Fees',
    paymentAmount: 'Payment amount',
    orderTime: 'Order time',
    orderStartTime: 'Order Time Start',
    orderEndTime: 'Order Time End',
    paymentStatus: 'Payment Status',
    callbackStatus: 'Callback status',
    callbackType: 'Callback Type',
    callbackTime: 'Callback Time',
    operate: 'Operate',
    paid: 'Paid',
    notpaid: 'Not paid',
    all: 'All',
    sortBy: 'sort by',
    total: 'Total',
    exportOrderData: 'Export Order Data',
    selectSearchType: 'Select Search Type',
    searchContent: 'Search content',
    notProcessingYet: 'Not processing yet',
    success: 'Success',
    failed: 'Failed',
    noCallback: 'No callback',
    manual: 'Manual',
    automatic: 'Automatic',
    byOrderTime: 'Order by order time',
    byOrderTimeInReverseOrder: 'Order by order time in reverse order',
    merchantID: 'Merchant Id',
    cardNumber: 'Payment card number',
    orderNumber: 'Order Number',
    merchantOrderNumber: 'Merchant order number',
    actualAmount: 'Actual payment amount',
    remark: 'Remark',
    source: 'Source',
    reason: 'Reason',
    processingStatus: 'Processing status',
    paymentTime: 'Payment Time',
    paymentStartTime: 'Payment Time Start',
    paymentEndTime: 'Payment Time End',
    processingTime: 'Processing Time',
    orderID: 'Order ID',
    merchantOrderID: 'Merchant order ID',
    callbackAddress: 'Callback address',
    callbackContent: 'Callback content',
    state: 'State',
    responseCode: 'Response Code',
    responseContent: 'Response Content',
    time: 'Time',
    confirmExportData: 'Confirm to export current order data?',
    warning: 'Warning',
    ok: 'OK',
    cancel: 'Cancel',
    statistics: 'Statistics',
    switchTitle:
      'The main switch of the project payment service controls the operation of the entire project payment function.',
    switch: 'Payment service master switch',
    submit: 'Submit',
    reset: 'Reset',
    selectBankTitle: 'Payment bank maintenance restrictions',
    selectBank: 'Select Configure Maintenance Deactivated Bank Code'
  },
  paymentMode: {
    cashier: 'Cashier (BANKQR)',
    scanZALO: 'Scan code to card (ZALO)',
    scanMOMO: 'Scan code to card (MOMO)',
    scanViettel: 'Scan code to card (Viettel)',
    h5MOMO: 'Native h5 jump (MOMO)',
    h5ZALO: 'Native h5 redirect (ZALO)',
    h5Viettel: 'Native h5 redirect (Viettel)',
    cardToCard: 'Card to Card (BANKQR)',
    scratchCardDirectly: 'Scratch card to submit data directly',
    scratchCardCashier: 'Scratch Card Cashier',
    usdt: 'USDT'
  },
  security: {
    orderID: 'Order ID',
    orderNumber: 'Order Number[0]',
    merchantId: 'Merchant Id',
    merchantName: 'Merchant Name',
    merchantOrderNumber: 'Merchant order Number',
    orderTime: 'Order time',
    orderStartTime: 'Order time start',
    orderEndTime: 'Order time end',
    orderType: 'Order type',
    exceptionType: 'Exception type',
    updateTime: 'Update time',
    allOrders: 'All orders',
    collection: 'Collection',
    payment: 'Payment',
    paymentFailedAndNoRefund: 'Payment on behalf of others - payment failed and no refund',
    paymentFailure: 'Payment-Duplicate refund due to payment failure',
    paymentNoDeduction: 'Payment on behalf of others - no deduction',
    paymentDeductions: 'Payment-Duplicate deductions',
    collectionSuccessfulNotAdd: 'Collection-Payment successful but no amount added',
    collectionSuccessfulAdd: 'Collection-Payment successful Repeatedly add amount',
    collectionAdd: 'Collection-Add amount when payment failed',
    all: 'All',
    receivingBank: 'Receiving bank',
    receivingAccount: 'Receiving Account',
    debitCardName: 'Debit card name',
    state: 'State',
    operate: 'Operate'
  },
  totalData: {
    orderAmount: 'Order amount',
    actualAmountPaid: 'Actual amount paid',
    actualNumberOfPayments: 'Actual number of payments',
    acutalHandlingFeePaid: 'Actual handling fee paid',
    callbackAmount: 'Callback amount',
    callbackNumber: 'Callback number',
    amountOfDroppedOrders: 'Amount of dropped orders',
    numberOfDroppedOrders: 'Number of dropped orders',
    total: 'Total'
  },
  statisticsData: {
    orderAmount: 'Total order amount',
    numberOfOrder: 'Total number of orders',
    orderHandlingFee: 'Total order handling fee',
    paymentAmount: 'Total payment amount',
    payments: 'Total payments',
    paymentFee: 'Total payment fee',
    callbacks: 'Total callbacks',
    callbackAmount: 'Total callback amount',
    numberFailedCallback: 'Number of failed payment callbacks',
    failureAmount: 'Payment success callback failure amount',
    title: 'Order data statistics'
  },
  AddMerchantForm: {
    addMechant: 'Add a merchant',
    merchantCategory: 'Merchant category',
    selectCategory: 'Select a merchant category',
    testCategory: 'Test merchant category',
    merchantName: 'Merchant name',
    account: 'Account',
    password: 'Password',
    confirmPassword: 'Confirm password',
    paymentInterest: 'Payment interest rate%',
    paymentDefaultInterest: 'Payment default interest rate%',
    issuanceInterest: 'Issuance interest rate%',
    issuanceDefaultInterest: 'Issuance default interest rate%',
    internalRecharge: 'Internal recharge interest rate%',
    internalRecharegeDefault: 'Internal recharge default interest rate%',
    minimumPayment: 'Minimum payment amount',
    maximumPayment: 'Maximum payment amount',
    remarks: 'Remarks',
    apiIpWhitelist: 'API IP whitelist',
    apiIpWhitelistOnePerLine: 'API IP whitelist/one per line',
    loginIpWhitelist: 'Login IP whitelist',
    ipWhitelistOnePerLine: 'IP whitelist/one per line',
    collectionFunctionSwitch: 'Collection function switch',
    paymentFunctionSwitch: 'Payment function switch'
  },
  collectionManagement: {
    ourOrderNumber: 'Our order number[0]',
    merchantName: 'Merchant name',
    platformOrderNumber: 'Platform order number',
    thirdpartyOrderNumber: 'Third-party order number',
    accountInformation: 'Account Information',
    paymentMode: 'Payment Mode',
    paymentChannels: 'Payment channels',
    orderAmount: 'Order amount',
    fees: 'Fees',
    paymentAmount: 'Payment amount',
    orderTime: 'Order time',
    paymentStatus: 'Payment Status',
    callbackStatus: 'Callback status',
    callbackType: 'Callback Type',
    callbackTime: 'Callback Time',
    operate: 'Operate',
    paid: 'Paid',
    notpaid: 'Not paid',
    all: 'All',
    sortBy: 'sort by',
    total: 'Total',
    exportOrderData: 'Export Order Data',
    selectSearchType: 'Select Search Type',
    searchContent: 'Search content',
    notProcessingYet: 'Not processing yet',
    success: 'Success',
    failed: 'Failed',
    noCallback: 'No callback',
    manual: 'Manual',
    automatic: 'Automatic',
    byOrderTime: 'Order by order time',
    byOrderTimeInReverseOrder: 'Order by order time in reverse order',
    merchantID: 'Merchant Id',
    cardNumber: 'Payment card number',
    orderNumber: 'Order Number',
    merchantOrderNumber: 'Merchant order number',
    actualAmount: 'Actual payment amount',
    remark: 'Remark',
    source: 'Source',
    reason: 'Reason',
    processingStatus: 'Processing status',
    paymentTime: 'Payment Time',
    processingTime: 'Processing Time',
    processingStartTime: 'Processing Start Time',
    processingEndTime: 'Processing End Time',
    orderID: 'Order ID',
    merchantOrderID: 'Merchant order ID',
    callbackAddress: 'Callback address',
    callbackContent: 'Callback content',
    state: 'State',
    responseCode: 'Response Code',
    responseContent: 'Response Content',
    time: 'Time',
    orderStartTime: 'Order Start Time',
    orderEndTime: 'Order End Time',
    callbackStartTime: 'Callback Start Time',
    callbackEndTime: 'Callback End Time'
  },
  APILogs: {
    requestMode: 'Request Mode',
    requestIP: 'Request IP',
    requestPath: 'Request Path',
    requestContent: 'Request Content',
    requestTime: 'Request Time',
    requestAddress: 'Request Address',
    responseCode: 'Response Code',
    responseData: 'Response Data',
    get: 'GET',
    post: 'POST',
    orderNumber: 'Order Number',
    channelName: 'Channel Name',
    ourOrderNumber: 'Our Order Number',
    errorMessage: 'Error Message'
  },
  systemManagement: {
    state: 'State',
    normal: 'Normal',
    disable: 'Disable',
    role: 'Role',
    account: 'Account',
    name: 'Name',
    mail: 'Mail',
    remark: 'Remark',
    addAccount: 'Add Account',
    addRole: 'Add Role',
    operate: 'Operate',
    creationTime: 'Creation Time',
    lastLoginTime: 'Last Login Time',
    loginAccount: 'Login Account',
    password: 'Password',
    confirmPassword: 'Confirm Password',
    userRole: 'User Role',
    selectUserRole: 'Select User Role',
    ok: 'Ok',
    cancel: 'Cancel',
    roleName: 'Role Name',
    roleCode: 'Role Code'
  },
  channelManagement: {
    channelName: 'Channel Name',
    merchantID: 'Upstream merchant ID',
    merchantAccount: 'Upstream merchant account',
    merchantPassword: 'Upstream merchant password',
    processingModule: 'Processing module',
    selectProcessingModule: 'Select Processing module',
    merchantKey: 'Upstream merchant key',
    merchantPublicKey: 'Upstream merchant public key',
    paymentRate: 'Payment Rate %',
    callbackIpWhitelist: 'Callback IP whitelist',
    placeIpWhitelist: 'Callback IP whitelist/one per line',
    maximumPaymentAmount: 'Maximum payment amount',
    minimumPaymentAmount: 'Minimum payment amount',
    limitTransactionsPerDay: 'Limit number of transactions per day',
    remark: 'Remark',
    supportedChannels: 'Supported Channels',
    cashier: 'Cashier (BANKQR)',
    codeZALO: 'Scan code to card (ZALO)',
    codeMOMO: 'Scan code to card (MOMO)',
    codeViettel: 'Scan code to card (Viettel)',
    nativeMOMO: 'Native h5 jump (MOMO)',
    nativeZALO: 'Native h5 redirect (ZALO)',
    nativeViettel: 'Native h5 redirect (Viettel)',
    cardBANKQR: 'Card to Card (BANKQR)',
    ScratchCardDirectly: 'Scratch card to submit data directly',
    ScratchCardCashier: 'Scratch Card Cashier',
    USDT: 'USDT',
    tunnelOpenStatu: 'Are you sure you want to open this channel?',
    tunnelCloseStatu: 'Are you sure you want to close this channel?',
    open: 'Open',
    closure: 'Close'
  },
  accountInfo: {
    name: 'Name',
    userId: 'User ID',
    userType: 'User Type',
    account: 'Account',
    registerTime: 'Registration Time ',
    merchantKey: 'Merchant Key',
    collectionInterestRate: 'Collection interest rate%',
    issuingInterestRate: 'Issuing Interest Rate%',
    internalRechargeRate: 'Internal Reharge Rate%',
    cashierBANKQRrate: 'Cashier (BANKQR)-Collection interest rate%',
    scanZALOrate: 'Scan code to card (ZALO) - Collection interest rate%',
    scanMOMOrate: 'Scan code to card (MOMO)-Collection interest rate%',
    scanViettelrate: 'Scan code to card (Viettel) - Collection interest rate%',
    nativeMOMOrate: 'Native h5 jump (MOMO)-collection interest rate%',
    nativeZALOrate: 'Native h5 redirect (ZALO)-collection rate%',
    nativeViettelrate: 'Native h5 redirect (Viettel)-Collection rate%',
    cardBANKQRrate: 'Card to Card (BANKQR) - Collection Rate%'
  },
  bankCardInfo: {
    bankType: 'Bank Type',
    bankcardnumber: 'Bank Card Number',
    cardholder: 'Cardholder',
    account: 'Account',
    addTime: 'Add Time',
    operate: 'Operate',
    addBankcard: 'Add Bank Card',
    applySettlement: 'Apply for settlement',
    settlementAmount: 'Settlement Account',
    bankcard: 'Bank Card',
    selectBankcard: 'Select Bank Card',
    availableBalance: 'Available Balance',
    afterBalance: 'Balance after settlement'
  },
  home: {
    merchantTotalBalance: 'Merchant Total Balance',
    todayOrderQuantity: `Today's Order Quantity`,
    todayCollectionAmount: `Today's Collection Amount`,
    todayPaymentAmount: `Today's Payment Amount`,
    total: 'total',
    day: 'day',
    todayGrowth: `Today's growth`,
    totalOrderQuantity: 'Total Order Quantity'
  }
}
